const express = require('express');
var exphbs = require('express-handlebars');
const mongoose = require('mongoose');
const router = express.Router();
const app = express();
const port = 3000;
app.engine('handlebars', exphbs({
    helpers: {
        productname: (a) => {
            return "'" + a + "'";
        },
        productid1: (a) => {
            return a;
        },
        productprice: (a) => {
            return a;
        }
    }
}));
app.set('view engine', 'handlebars');
// connect mongoodb
const uri = "mongodb+srv://admin:123@cluster0.d2vai.mongodb.net/ATNshop?retryWrites=true&w=majority";
mongoose.connect(uri, {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(e => {
    console.log('connect thanh cong');
}).catch(e => {
    console.log('connect that bai');
})

const schema_pr = new mongoose.Schema({
    productid: Number,
    productname: String,
    productprice: Number,
    productcat: Number,
    productdesc: String,
});

const schema_cat = new mongoose.Schema({
    categoryid: Number,
    categoryname: String,

});
const schema_cs = new mongoose.Schema({
    customerid: Number,
    customername: String,
    customeremail: String,
    customerphone: String,
    customeraddress: String,

});
const schema_order = new mongoose.Schema({
    id_order: Number,
    id_product: Number,
    date: Date,
    quantity: Number,
    price: Number,
});


app.use(express.json());
app.use(express.urlencoded({
    extended: false
}));

router.get('/', (req, res) => {
    res.render('home');
})



router.get('/printBill/:id', async (req, res) => {
    var id_bill = Number(req.params.id);
    var inforBill;
    await mongoose.model('invoice', schema_order).aggregate().match({
        id_order: id_bill
    }).group({
        _id: {
            id: '$id_order',
            date: '$date'
        },
        total: {
            $sum: '$price'
        }
    }).exec(async (err, bill) => {
        bill[0]._id.date = new Date(bill[0]._id.date).getDate() + '-' + (new Date(bill[0]._id.date).getMonth() + 1) + '-' + new Date(bill[0]._id.date).getFullYear();
        await mongoose.model('invoice', schema_order).aggregate().match({
            id_order: id_bill
        }).lookup({
            from: 'products',
            localField: 'id_product',
            foreignField: 'productid',
            as: 'product',
        }).exec((err, pr) => {
            res.render('printBill', {
                bill,
                pr
            })
        })

    })
})

router.get('/invoices', async (req, res) => {
    await mongoose.model('product', schema_pr).find({}).then(e => {
        var pr = e.map(es => es.toObject());
        res.render('invoice', {
            pr
        });
    });

})


router.post('/invoices', (req, res) => {
    var i = 0;
    for (i; i < req.body.productid.length; i++) {
        var bill = {
            id_order: req.body.invoiceid,
            date: req.body.invoicedate,
            id_product: req.body.productid[i],
            quantity: req.body.quantity[i],
            price: req.body.productprice[i],
        }
        mongoose.model('invoice', schema_order).create(bill);
    }
    res.redirect('/');
})

router.get('/viewInvoices', (req, res) => {
    mongoose.model('invoice', schema_order).aggregate().group({
        _id: {
            id: '$id_order',
            date: '$date'
        },
        type_pr: {
            $sum: 1
        },
        quantity: {
            $sum: '$quantity'
        },
        total: {
            $sum: '$price'
        },
    }).exec((err, bill) => {
        var i = 0;
        for (i; i < bill.length; i++) {
            bill[i]._id.date = new Date(bill[i]._id.date).getDate() + '-' + (new Date(bill[i]._id.date).getMonth() + 1) + '-' + new Date(bill[i]._id.date).getFullYear();
        }
        res.render('viewInvoices', {
            bill
        });
    })
})



router.get('/addProduct', (req, res) => {
    res.render('addProduct');
})
router.post('/addProduct', async (req, res) => {
    await mongoose.model('product', schema_pr).create(req.body);
    res.redirect('/');
})

router.get('/addCategory', (req, res) => {
    res.render('addCategory');
})
router.post('/addCategory', async (req, res) => {
    await mongoose.model('category', schema_cat).create(req.body);
    res.render('/');
})
router.get('/addCustomer', (req, res) => {
    res.render('addCustomer');
})
router.post('/addCustomer', async (req, res) => {
    await mongoose.model('customer', schema_cs).create(req.body);
    res.redirect('/');
})



router.get('/viewProducts', async (req, res) => {
    await mongoose.model('product', schema_pr).find({}).then(e => {
        var pr = e.map(es => es.toObject());
        console.log(pr);
        res.render('viewProducts', {
            pr
        });
    });
})
router.get('/viewCategories', async (req, res) => {
    await mongoose.model('category', schema_cat).find({}).then(e => {
        var ct = e.map(es => es.toObject());
        res.render('viewCategories', {
            ct
        });
    });
})

router.get('/viewCustomers', async (req, res) => {
    await mongoose.model('customer', schema_cs).find({}).then(e => {
        var cs = e.map(es => es.toObject());
        res.render('viewCustomers', {
            cs
        });
    });
})

app.use('/', router);
app.listen(process.env.PORT || port, () => {
    console.log(`Example app listening at http://localhost:${port}`)
})